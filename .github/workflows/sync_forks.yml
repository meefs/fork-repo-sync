name: Sync All Forks

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'

jobs:
  sync-forks:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Sync All Forks
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          #!/usr/bin/env bash
          # NOTICE: No `set -e`, so we can handle errors manually.

          RED="\033[1;31m"
          GREEN="\033[1;32m"
          YELLOW="\033[1;33m"
          BLUE="\033[1;34m"
          RESET="\033[0m"

          if ! command -v jq &> /dev/null; then
            echo -e "${RED}jq not found. Exiting...${RESET}"
            exit 1
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "meefs-bot@rackhelp.com"
          git config --global credential.helper store
          echo "https://x-access-token:$GITHUB_TOKEN@github.com" > ~/.git-credentials

          PAGE=1
          PER_PAGE=100

          SUCCESS_COUNT=0
          SKIP_COUNT=0
          FAIL_COUNT=0

          # Arrays to store names of failed repos (optional: you could do similarly for skipped)
          FAILED_REPOS=()

          while true; do
            REPOS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                     "https://api.github.com/users/meefs/repos?type=forks&per_page=$PER_PAGE&page=$PAGE")

            if [ "$(echo "$REPOS" | jq '. | length')" -eq 0 ]; then
              break
            fi

            REPOS_LIST="$(echo "$REPOS" | jq -r '.[] | .full_name + " " + .clone_url')"

            IFS=$'\n'
            for LINE in $REPOS_LIST; do
              IFS=' ' read -r REPO_FULL_NAME REPO_CLONE_URL <<< "$LINE"
              echo -e "${BLUE}Processing ${REPO_FULL_NAME}...${RESET}"

              REPO_NAME=$(basename "$REPO_CLONE_URL" .git)

              HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" \
                -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO_FULL_NAME")

              if [ "$HTTP_STATUS" = "404" ]; then
                echo -e "${YELLOW}Repo ${REPO_FULL_NAME} not found (404). Skipping...${RESET}"
                SKIP_COUNT=$((SKIP_COUNT+1))
                continue
              elif [ "$HTTP_STATUS" = "401" ]; then
                echo -e "${RED}401 Unauthorized for ${REPO_FULL_NAME}. Skipping...${RESET}"
                SKIP_COUNT=$((SKIP_COUNT+1))
                continue
              elif [ "$HTTP_STATUS" = "403" ]; then
                echo -e "${RED}403 Forbidden for ${REPO_FULL_NAME}. Possibly rate-limited. Skipping...${RESET}"
                SKIP_COUNT=$((SKIP_COUNT+1))
                continue
              fi

              REPO_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO_FULL_NAME")

              UPSTREAM_CLONE_URL=$(echo "$REPO_INFO" | jq -r '.parent.clone_url // empty')
              if [[ -z "$UPSTREAM_CLONE_URL" ]]; then
                echo -e "${YELLOW}No upstream found for ${REPO_FULL_NAME}. Skipping...${RESET}"
                SKIP_COUNT=$((SKIP_COUNT+1))
                continue
              fi

              # Clone
              if git clone -v "$REPO_CLONE_URL" "$REPO_NAME"; then
                cd "$REPO_NAME"
              else
                echo -e "${RED}Failed to clone ${REPO_CLONE_URL}. Skipping...${RESET}"
                FAIL_COUNT=$((FAIL_COUNT+1))
                FAILED_REPOS+=("$REPO_FULL_NAME")
                continue
              fi

              # Add upstream
              if ! git remote add upstream "$UPSTREAM_CLONE_URL"; then
                echo -e "${RED}Failed to add upstream for ${REPO_FULL_NAME}. Skipping...${RESET}"
                cd ..
                rm -rf "$REPO_NAME"
                FAIL_COUNT=$((FAIL_COUNT+1))
                FAILED_REPOS+=("$REPO_FULL_NAME")
                continue
              fi

              # Fetch
              if ! git fetch upstream; then
                echo -e "${RED}Failed to fetch upstream for ${REPO_FULL_NAME}. Skipping...${RESET}"
                cd ..
                rm -rf "$REPO_NAME"
                FAIL_COUNT=$((FAIL_COUNT+1))
                FAILED_REPOS+=("$REPO_FULL_NAME")
                continue
              fi

              # Check default branch
              DEFAULT_BRANCH=$(echo "$REPO_INFO" | jq -r '.default_branch // empty')
              if [ -z "$DEFAULT_BRANCH" ] || [ "$DEFAULT_BRANCH" = "null" ]; then
                echo -e "${YELLOW}No valid default branch for ${REPO_FULL_NAME}. Skipping...${RESET}"
                cd ..
                rm -rf "$REPO_NAME"
                SKIP_COUNT=$((SKIP_COUNT+1))
                continue
              fi

              # Checkout
              if ! git checkout "$DEFAULT_BRANCH"; then
                echo -e "${RED}Failed to checkout ${DEFAULT_BRANCH} for ${REPO_FULL_NAME}. Skipping...${RESET}"
                cd ..
                rm -rf "$REPO_NAME"
                FAIL_COUNT=$((FAIL_COUNT+1))
                FAILED_REPOS+=("$REPO_FULL_NAME")
                continue
              fi

              # Merge
              if ! git merge upstream/"$DEFAULT_BRANCH" --allow-unrelated-histories -m "Merged by GitHub Actions"; then
                echo -e "${RED}Merge conflict or error merging ${REPO_FULL_NAME}.${RESET}"
                cd ..
                rm -rf "$REPO_NAME"
                FAIL_COUNT=$((FAIL_COUNT+1))
                FAILED_REPOS+=("$REPO_FULL_NAME")
                continue
              fi

              # Push
              if ! git push origin "$DEFAULT_BRANCH"; then
                echo -e "${RED}Failed to push changes to ${REPO_FULL_NAME}.${RESET}"
                cd ..
                rm -rf "$REPO_NAME"
                FAIL_COUNT=$((FAIL_COUNT+1))
                FAILED_REPOS+=("$REPO_FULL_NAME")
                continue
              fi

              # Success
              echo -e "${GREEN}Successfully merged/pushed ${REPO_FULL_NAME}.${RESET}"
              SUCCESS_COUNT=$((SUCCESS_COUNT+1))

              # Cleanup
              cd ..
              rm -rf "$REPO_NAME"
            done
            IFS=' '

            PAGE=$((PAGE+1))
          done

          echo -e "${GREEN}Summary:${RESET}"
          echo "  Success: $SUCCESS_COUNT"
          echo "  Skipped: $SKIP_COUNT"
          echo "  Failed:  $FAIL_COUNT"

          # If we had failures, list them
          if [ "$FAIL_COUNT" -gt 0 ]; then
            echo -e "${RED}Failed Repositories:${RESET}"
            for FR in "${FAILED_REPOS[@]}"; do
              echo "  $FR"
            done
          fi
