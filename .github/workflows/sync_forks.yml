name: Sync All Forks

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs every day at midnight

jobs:
  sync-forks:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      
      - name: Sync all forks
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }} # Using the specified token for authentication
        run: |
          #!/bin/bash
          set -e

          # Check if jq is installed
          if ! command -v jq &> /dev/null; then
              echo "jq could not be found. Please ensure jq is installed in the runner environment."
              exit 1
          fi

          # Fetch list of forked repositories for the user 'meefs'
          REPOS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/users/meefs/repos?type=forks&per_page=100&page=1")

          # Loop through each repository and sync
          echo "$REPOS" | jq -r '.[] | .full_name + " " + .clone_url' | while IFS=" " read -r REPO_FULL_NAME REPO_CLONE_URL; do
            echo "Processing $REPO_FULL_NAME"
            
            # Extract repository name
            REPO_NAME=$(basename "$REPO_CLONE_URL" .git)

            # Fetch detailed repository info to attempt retrieving the upstream clone URL
            REPO_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO_FULL_NAME")
            UPSTREAM_CLONE_URL=$(echo "$REPO_INFO" | jq -r '.parent.clone_url // empty')
            
            if [[ -z "$UPSTREAM_CLONE_URL" ]]; then
              echo "Unable to find upstream repository for $REPO_FULL_NAME. Skipping..."
              continue
            fi
            
            # Clone the forked repository
            if git clone "$REPO_CLONE_URL" "$REPO_NAME"; then
              cd "$REPO_NAME"
              
              # Add upstream repository
              git remote add upstream "$UPSTREAM_CLONE_URL"

              # Fetch updates from the upstream repository
              git fetch upstream

              # Get the default branch name
              DEFAULT_BRANCH=$(echo "$REPO_INFO" | jq -r '.default_branch')

              # Check if the default branch exists and merge changes from upstream
              if [ -n "$DEFAULT_BRANCH" ]; then
                git checkout "$DEFAULT_BRANCH"
                git merge upstream/"$DEFAULT_BRANCH" --allow-unrelated-histories -m "Merged by GitHub Actions" || echo "Failed to merge from upstream/$DEFAULT_BRANCH"
                
                # Push updates back to the fork on GitHub
                git push origin "$DEFAULT_BRANCH" || echo "Failed to push updates to $REPO_FULL_NAME"
              else
                echo "Default branch not found for $REPO_FULL_NAME"
              fi
              
              # Cleanup: Move out and remove the repo directory
              cd ..
              rm -rf "$REPO_NAME"
            else
              echo "Failed to clone $REPO_CLONE_URL"
            fi
          done
