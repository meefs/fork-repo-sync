name: Update REPOS.md

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *' # Runs every four hours
  
# Add concurrency to prevent multiple runs interfering with each other
concurrency:
  group: update-repos
  cancel-in-progress: true

jobs:
  update-repos-list:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get full history to avoid git issues
      
      - name: Update REPOS.md with forked repositories
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }} # Using the specified token for authentication
        run: |
          #!/bin/bash
          set -e

          # Check if jq is installed
          if ! command -v jq &> /dev/null; then
            echo "jq could not be found. Please ensure jq is installed in the runner environment."
            exit 1
          fi

          # Initialize a temporary file to store intermediate results
          TEMP_FILE=$(mktemp)
          PAGE=1
          PER_PAGE=100
          TOTAL_REPOS="[]"

          echo "Fetching repositories for user meefs..."

          # Fetch all pages of forked repositories
          while true; do
            REPOS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/users/meefs/repos?type=forks&per_page=$PER_PAGE&page=$PAGE")
            
            # Break the loop if the response is empty
            if [ "$(echo "$REPOS" | jq '. | length')" -eq 0 ]; then
              break
            fi
            
            REPOS_COUNT=$(echo "$REPOS" | jq '. | length')
            echo "Fetched page $PAGE with $REPOS_COUNT repositories"
            
            # Append the current page of repos to the total list
            TOTAL_REPOS=$(echo "$TOTAL_REPOS" "$REPOS" | jq -s 'add')
            
            # Increment the page counter
            PAGE=$((PAGE + 1))
            
            # Add a small delay to avoid hitting rate limits
            sleep 1
          done

          TOTAL_COUNT=$(echo "$TOTAL_REPOS" | jq '. | length')
          echo "Total repositories fetched: $TOTAL_COUNT"

          # Process each repository
          echo "Processing repositories and determining languages..."
          echo "$TOTAL_REPOS" | jq -c '.[]' | while read -r REPO; do
            REPO_FULL_NAME=$(echo "$REPO" | jq -r '.full_name')
            REPO_LANGUAGE=$(echo "$REPO" | jq -r '.language // "Unknown"')
            REPO_URL=$(echo "$REPO" | jq -r '.html_url')
            REPO_DESCRIPTION=$(echo "$REPO" | jq -r '.description // "No description"')
            
            # If the language is Unknown, try to determine it from the languages endpoint
            if [ "$REPO_LANGUAGE" = "Unknown" ]; then
              # Extract owner and repo name
              REPO_OWNER=$(echo "$REPO_FULL_NAME" | cut -d'/' -f1)
              REPO_NAME=$(echo "$REPO_FULL_NAME" | cut -d'/' -f2)
              
              # Get languages data
              LANGUAGES_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/languages")
              sleep 1
              
              # Check if any languages were found
              LANGUAGES_COUNT=$(echo "$LANGUAGES_DATA" | jq 'length')
              if [ "$LANGUAGES_COUNT" -gt 0 ]; then
                # Get the language with the highest byte count
                PRIMARY_LANG=$(echo "$LANGUAGES_DATA" | jq -r 'to_entries | max_by(.value) | .key')
                
                if [ -n "$PRIMARY_LANG" ] && [ "$PRIMARY_LANG" != "null" ]; then
                  REPO_LANGUAGE=$PRIMARY_LANG
                fi
              fi
            fi
            
            # Append repository info to temporary file
            echo "$REPO_LANGUAGE|$REPO_FULL_NAME|$REPO_URL|$REPO_DESCRIPTION" >> "$TEMP_FILE"
          done

          echo "Creating REPOS.md file..."
          echo "" > REPOS.md ## Clearing out any contents from previous REPOS.md

          # Sort and group by language
          PREV_LANG=""
          sort "$TEMP_FILE" | while IFS="|" read -r LANG NAME URL DESC; do
            # Check if the current language section has changed and if so, start a new section
            if [ "$PREV_LANG" != "$LANG" ]; then
              if [ -n "$PREV_LANG" ]; then
                # Add a newline between language sections
                echo "" >> REPOS.md
              fi
              echo "## $LANG" >> REPOS.md
              PREV_LANG=$LANG
            fi
            
            # Append repository info under the current language section
            echo "- [$NAME]($URL): $DESC" >> REPOS.md
          done

          echo "REPOS.md generation complete."

          # Remove temporary file
          rm "$TEMP_FILE"

          # Git configuration
          echo "Configuring Git..."
          git config --global user.name "GitHub Actions"
          git config --global user.email "meefs-bot@rackhelp.com"
          git config --global credential.helper store
          echo "https://x-access-token:$GITHUB_TOKEN@github.com" > ~/.git-credentials

          # Fetch latest changes before committing
          echo "Fetching latest changes from remote..."
          git fetch origin
          git pull origin main --no-rebase

          # Commit and push if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing and pushing..."
            git add REPOS.md
            git commit -m "Update REPOS.md with forked repositories"
            git push
            echo "REPOS.md has been updated and pushed."
          else
            echo "No changes to commit."
          fi

          echo "Script completed successfully."
