name: Update README with Forked Repositories

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs every day at midnight

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      
      - name: Update README.md with forked repositories
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          #!/bin/bash
          set -e

          if ! command -v jq &> /dev/null; then
              echo "jq could not be found. Please ensure jq is installed in the runner environment."
              exit 1
          fi

          fetch_repos() {
            local page=1
            local all_repos="[]"
            
            while true; do
              echo "Fetching page $page of repositories..."
              local response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/users/meefs/repos?type=forks&per_page=100&page=$page")
              
              # Check if the response is valid JSON
              if ! echo "$response" | jq empty 2>/dev/null; then
                echo "Error: Invalid JSON response from GitHub API on page $page"
                echo "Response: $response"
                return 1
              fi
              
              # Check if the response is empty or if we've reached the end
              if [ "$(echo "$response" | jq '. | length')" -eq 0 ]; then
                break
              fi
              
              all_repos=$(echo "$all_repos" "$response" | jq -s 'add')
              
              ((page++))
            done
            
            echo "$all_repos"
          }

          echo "Starting to fetch all forked repositories..."
          REPOS=$(fetch_repos)

          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch repositories"
            exit 1
          fi

          # Debug: Print the number of repositories fetched
          echo "Number of repositories fetched: $(echo "$REPOS" | jq length)"

          # Initialize a temporary file to store intermediate results
          TEMP_FILE=$(mktemp)

          # Process each repository
          echo "$REPOS" | jq -c '.[]' | while read -r REPO; do
            REPO_FULL_NAME=$(echo "$REPO" | jq -r '.full_name')
            REPO_LANGUAGE=$(echo "$REPO" | jq -r '.language // "Unknown"')
            REPO_URL=$(echo "$REPO" | jq -r '.html_url')
            REPO_DESCRIPTION=$(echo "$REPO" | jq -r '.description // "No description"')

            # Debug: Print each repository being processed
            echo "Processing: $REPO_FULL_NAME ($REPO_LANGUAGE)"

            # Append repository info to temporary file
            echo "$REPO_LANGUAGE|$REPO_FULL_NAME|$REPO_URL|$REPO_DESCRIPTION" >> "$TEMP_FILE"
          done

          # Debug: Print the contents of the temporary file
          echo "Contents of temporary file:"
          cat "$TEMP_FILE"

          # Generate repository content
          REPOS_CONTENT="## Forked Repositories\n\n"
          REPOS_CONTENT+="Last updated: $(date '+%Y-%m-%d %H:%M:%S')\n\n"

          # Sort and group by language
          sort "$TEMP_FILE" | while IFS="|" read -r LANG NAME URL DESC; do
            if [ "$PREV_LANG" != "$LANG" ]; then
              REPOS_CONTENT+="\n### $LANG\n"
              PREV_LANG=$LANG
            fi
            REPOS_CONTENT+="- [$NAME]($URL): $DESC\n"
          done

          # Remove temporary file
          rm "$TEMP_FILE"

          # Debug: Print the generated content
          echo "Generated content:"
          echo -e "$REPOS_CONTENT"

          # Update README.md
          START_MARKER="<!-- START_SECTION:forked_repos -->"
          END_MARKER="<!-- END_SECTION:forked_repos -->"

          if grep -q "$START_MARKER" README.md && grep -q "$END_MARKER" README.md; then
            sed -i "/$START_MARKER/,/$END_MARKER/c\\$START_MARKER\\n$REPOS_CONTENT\\n$END_MARKER" README.md
          else
            echo -e "\n$START_MARKER\n$REPOS_CONTENT\n$END_MARKER" >> README.md
          fi

          # Git configuration and commit changes
          git config user.name "GitHub Actions"
          git config user.email "meefs-bot@rackhelp.com"

          if [[ -n $(git status -s) ]]; then
            git add README.md
            git commit -m "Update README.md with forked repositories"
            git push
          else
            echo "No changes to commit."
          fi